name: Security audit

permissions:
  contents: read

on:
  pull_request:
    paths:
    - '**/Cargo.toml'
    - '**/Cargo.lock'
    - '.github/workflows/audit.yml'
  push:
    branches:
    - main
    - 'run-ci/**'
    - '**/run-ci/**'
  workflow_dispatch:

env:
  RUST_BACKTRACE: 1
  CARGO_TERM_COLOR: always
  CLICOLOR: 1

jobs:
  security_audit:
    permissions:
      issues: write # to create issues (actions-rs/audit-check)
      checks: write # to create check (actions-rs/audit-check)
    runs-on: ubuntu-latest
    # Prevent sudden announcement of a new advisory from failing ci:
    continue-on-error: true
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - uses: taiki-e/install-action@v2
      with:
        tool: cargo-audit
    - name: Stub out `cargo generate-lockfile` to work around actions-rs/audit-check#163
      run: |
        cd ~/.cargo/bin
        mv cargo cargo.orig

        cat >cargo <<'EOF'
        #!/bin/sh
        set -eu
        # Assume the first argument is the subcommand, rather than an option. This is not robust,
        # but it works for the very simple call in actions-rs/audit-check, which is what matters.
        case "$1" in
        generate-lockfile)
          printf '::warning SKIPPING: %s %s\n' "$0" "$*" ;;
        *)
          exec "$0.orig" "$@" ;;
        esac
        EOF

        chmod +x cargo
    - uses: actions-rs/audit-check@v1
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

  cargo_deny:
    permissions:
      issues: write # to create issues (actions-rs/audit-check)
      checks: write # to create check (actions-rs/audit-check)
    runs-on: ubuntu-latest
    strategy:
      matrix:
        checks:
        - bans licenses sources
    steps:
    - uses: actions/checkout@v4
    - uses: EmbarkStudios/cargo-deny-action@v2
      with:
        command: check ${{ matrix.checks }}
        rust-version: stable
